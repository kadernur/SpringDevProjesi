package kodlama.io.Devs.business.concretes;

import java.util.ArrayList;
import java.util.List;

import javax.management.RuntimeErrorException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kodlama.io.Devs.business.abstracts.LanguageService;
import kodlama.io.Devs.business.requests.LanguageRequest;
import kodlama.io.Devs.business.responses.LanguageResponse;
import kodlama.io.Devs.dataAccess.abstracts.LanguageRepository;
import kodlama.io.Devs.entities.concretes.Language;

@Service
public class LanguageManager implements LanguageService {
	
	LanguageRepository languageRepository;
	
	
    @Autowired //IOC yapısını sağlar.
	public LanguageManager(LanguageRepository languageRepository) {
		
		this.languageRepository = languageRepository;
	}

	@Override
	public List<LanguageResponse> getAll() {
		
		List<Language> languages=languageRepository.findAll();
		List<LanguageResponse> languageResponse=new ArrayList<LanguageResponse>();
		
		for(Language language: languages)
		{
			LanguageResponse responseItem=new LanguageResponse();
			responseItem.setId(language.getId());
			responseItem.setName(language.getName());
			languageResponse.add(responseItem);
		}
		
		return languageResponse;
		
	}

	@Override
	public void add(LanguageRequest languageRequest) throws Exception {
		
		checkNameValid(languageRequest.getName());
		 Language language=LanguageRepository.findById(id);
		 language.setName((languageRequest.getName()));
		
		languageRepository.save(language);
		
		
	}

	@Override
	public void delete(int id) {
		languageRepository.deleteById(id);
		
	}

	@Override
	public void update(Language language, int id) {
		if(checkLanguageNameValid(language))
			{
				throw new RuntimeException("programming language cannot be empty");
			}
	
		if(isLanguageExist(language))
			{
				throw new RuntimeException("This programming language is available, please enter another name.");
			}
		
		languageRepository.update(language,id);
		
	}

	@Override
	public Language getById(int id) {
		return languageRepository.findById(id);
	}

	
	//program ismi aynı olamaz
	//program ismi boş geçilemez
	//kurallarının kontrolünü bu fonksiyonlar sağlar.
	private void checkNameValid(String name) throws Exception
	{
		Language isExist= languageRepository.findByName(name);
		if(isExist !=null)
		{
			throw new Exception("Bu isim zaten Var!!!");
		}
		
		if(name.isBlank())
		{
			throw new Exception("İsim boş Geçilemez!!!");
		}
		
	}
	
	

	@Override
	public LanguageResponse getResponseById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void update(LanguageRequest languageRequest, int id) throws Exception {
		// TODO Auto-generated method stub
		
	}
}
